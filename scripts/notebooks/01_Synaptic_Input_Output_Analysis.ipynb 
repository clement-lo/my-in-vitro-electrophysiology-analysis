# Synaptic Input-Output Analysis

## Introduction and Overview

This notebook performs synaptic input-output analysis using electrophysiological data. The analysis involves loading synaptic data, fitting a curve (sigmoid or linear), and visualizing the results to understand synaptic behavior under different conditions.

## Import Libraries

Import the necessary Python libraries for data manipulation, analysis, and visualization.

```python
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import os

def load_data(file_path):
    """
    Load synaptic input-output data from a CSV file.
    
    Args:
        file_path (str): Path to the input data file.
    
    Returns:
        data (DataFrame): Loaded data as a Pandas DataFrame.
    
    Raises:
        FileNotFoundError: If the file is not found at the specified path.
        ValueError: If the data format is incorrect or missing columns.
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"The file '{file_path}' does not exist.")
    
    data = pd.read_csv(file_path)
    if 'Input' not in data.columns or 'Output' not in data.columns:
        raise ValueError("The input data must contain 'Input' and 'Output' columns.")
    
    return data

# Load the data
file_path = '../data/synaptic_io_data.csv'  # Update this path as needed
try:
    data = load_data(file_path)
    display(data.head())  # Show the first few rows of the data
except Exception as e:
    print(f"Error loading data: {e}")

def analyze_synaptic_io(data, model='sigmoid'):
    """
    Analyze synaptic input-output relationships using curve fitting.
    
    Args:
        data (DataFrame): Synaptic data containing input and output columns.
        model (str): The model to use for curve fitting ('sigmoid' or 'linear').
    
    Returns:
        popt (ndarray): Optimal parameters for the fitted curve.
        pcov (ndarray): Covariance of the parameters.
    """
    # Validate model type
    if model not in ['sigmoid', 'linear']:
        raise ValueError("Model must be 'sigmoid' or 'linear'.")
    
    # Define model functions
    def sigmoid(x, a, b, c):
        return c / (1 + np.exp(-(x - a) / b))

    def linear(x, m, c):
        return m * x + c

    # Select model for curve fitting
    input_data = data['Input'].values
    output_data = data['Output'].values
    if model == 'sigmoid':
        popt, pcov = curve_fit(sigmoid, input_data, output_data, p0=[0, 1, 1])
    else:
        popt, pcov = curve_fit(linear, input_data, output_data)

    return popt, pcov

# Perform the analysis
model = 'sigmoid'  # Change to 'linear' for a different model
try:
    popt, pcov = analyze_synaptic_io(data, model=model)
    print("Optimal parameters:", popt)
except Exception as e:
    print(f"Error in analysis: {e}")
